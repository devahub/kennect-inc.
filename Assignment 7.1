Demonstration of concepts like for, while,continue using c++ language is shown below
=====================================================================================>


1) For---> For is a the keyword used to make a loop called for loop.A for loop is a controlling statement that is used to to run a code with some iterations 
            and conditions over and over again.
            
            eg---->
            for(int i=0;i<10;i++){
            cout<<i<<",";
            }

           output will be---> 0,1,2,3,4,5,6,7,8,9

2) While---> While is a reserved keyword used in while loop and works same as for loop but it run as long as the condition gets satisfied or gets true.
              eg-->  int id = 0;
                    while (id < 5) {
                      cout << id << ",";
                     id++;
                    }
                    output will be---->0,1,2,3,4

3) Continue---> Continue is a keyword which is used to skip the execution of further statements in the block for this iteration and continues with the next iteration.
                  eg---->
                  int main() {
                  int i=0;
                 while (i < 10) {
                    if (i==4) {
                    i++;
                  continue;
                 }
                  cout << i << "  ";
                  i++;
              }
            }
        
            output will be---> 0  1  2  3  5  6  7  8  9

4) If--->  we use if statement to specify a block of code to be executed, if a specified condition is true
                 eg--->
                  if (19 > 18) {
                   cout << "19 is greater than 18";
                        }
                        output will be-->19 is greater than 18
            
5) Else--->If the same condition used in if statement is false then we use else statement.
                 eg--->
                  int time = 22;
                   if (time < 10) {
                  cout << "Good morning.";
                  } else if (time < 20) {
                 cout << "Good day.";
                  } else {
                   cout << "Good evening.";
                  }
                 output will be---> Good evening

6) Switch--->we always use the switch statement when we have to select one of many code blocks to be executed.
              eg---->
                 int day = 4;
                switch (day) {
                case 1:
                 cout << "Monday";
                 break;
                case 2:
               cout << "Tuesday";
                 break;
                case 3:
                 cout << "Wednesday";
              break;
              }
=====================================================================================

Recurssion--->When function is called within the same function, it is known as recursion in C++. The function which calls the same function, 
              is known as recursive function.
              eg--->
              void recursion()
              {
                ... .. ...
                recursion();
                ... .. ...
              }

                int main()
              {
              ... .. ...
                 recursion();
                ... .. ...
              }

=====================================================================================

Binary search Tree--->Binary search tree in C++ is defined as a data structure that consists of the node-based binary tree where 
                      each node consists of at most 2 nodes that are referred to as child nodes. This tree is also known as an ordered or sorted tree.


=====================================================================================

Closure--->  A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). 
                function makeFunc() {
               const name = 'Mozilla';
                 function displayName() {
              console.log(name);
              }
              return displayName;
              }

             const myFunc = makeFunc();
               myFunc();

=====================================================================================


